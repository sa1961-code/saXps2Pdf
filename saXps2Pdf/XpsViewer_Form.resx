<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>